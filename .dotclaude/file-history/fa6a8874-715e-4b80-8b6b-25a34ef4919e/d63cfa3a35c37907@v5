'use client';

import { useEffect, useState, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

// Fix for default marker icons in Leaflet
// eslint-disable-next-line @typescript-eslint/no-explicit-any
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

// Custom icons
const candyIcon = L.divIcon({
  html: '<div style="font-size: 32px;">üç¨</div>',
  className: 'custom-div-icon',
  iconSize: [32, 32],
  iconAnchor: [16, 32],
});

const ghostIcon = L.divIcon({
  html: '<div style="font-size: 32px;">üëª</div>',
  className: 'custom-div-icon',
  iconSize: [32, 32],
  iconAnchor: [16, 32],
});

interface MapControllerProps {
  center: [number, number];
  zoom: number;
}

function MapController({ center, zoom }: MapControllerProps) {
  const map = useMap();

  useEffect(() => {
    map.setView(center, zoom);
  }, [center, zoom, map]);

  return null;
}

interface CandyMapProps {
  cartLocation: { latitude: number; longitude: number } | null;
  userLocation: { latitude: number; longitude: number } | null;
  center?: [number, number];
  zoom?: number;
  updateKey?: number;
}

export default function CandyMap({ cartLocation, userLocation, center, zoom = 15, updateKey }: CandyMapProps) {
  const [mapCenter, setMapCenter] = useState<[number, number]>(
    center || [33.7490, -84.3880] // Default to Atlanta
  );
  const hasInitialized = useRef(false);

  // Update map center when explicitly requested via center prop
  useEffect(() => {
    if (center) {
      setMapCenter(center);
      hasInitialized.current = true; // Mark as initialized when explicitly centered
    }
  }, [center, updateKey]);

  // Set initial map center only once when locations first become available
  useEffect(() => {
    if (!hasInitialized.current) {
      if (userLocation) {
        setMapCenter([userLocation.latitude, userLocation.longitude]);
        hasInitialized.current = true;
      } else if (cartLocation) {
        setMapCenter([cartLocation.latitude, cartLocation.longitude]);
        hasInitialized.current = true;
      }
    }
  }, [userLocation, cartLocation]);

  return (
    <MapContainer
      center={mapCenter}
      zoom={zoom}
      style={{ height: '100%', width: '100%' }}
      className="z-0"
    >
      <MapController center={mapCenter} zoom={zoom} />
      <TileLayer
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
      />

      {cartLocation && (
        <Marker
          position={[cartLocation.latitude, cartLocation.longitude]}
          icon={candyIcon}
        >
          <Popup>
            <div className="text-center">
              <div className="text-2xl mb-1">üç¨</div>
              <div className="font-bold">Candy Cart</div>
              <div className="text-sm text-gray-600">Come get your treats!</div>
            </div>
          </Popup>
        </Marker>
      )}

      {userLocation && (
        <Marker
          position={[userLocation.latitude, userLocation.longitude]}
          icon={ghostIcon}
        >
          <Popup>
            <div className="text-center">
              <div className="text-2xl mb-1">üëª</div>
              <div className="font-bold">You are here</div>
            </div>
          </Popup>
        </Marker>
      )}
    </MapContainer>
  );
}
