'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import dynamic from 'next/dynamic';
import { useCandyCartStore } from '@/store/candyCartStore';

// Dynamically import map to avoid SSR issues
const CandyMap = dynamic(() => import('@/components/CandyMap'), {
  ssr: false,
  loading: () => (
    <div className="w-full h-full flex items-center justify-center bg-purple-900">
      <div className="text-white text-xl">Loading map... 🗺️</div>
    </div>
  ),
});

export default function HomePage() {
  const router = useRouter();
  const { cartLocation, candyStatus, festiveMessage, autoRefreshEnabled, refreshInterval, isAdminLoggedIn } =
    useCandyCartStore();

  const [mounted, setMounted] = useState(false);
  const [userLocation, setUserLocation] = useState<{ latitude: number; longitude: number } | null>(null);
  const [mapCenter, setMapCenter] = useState<[number, number] | undefined>(undefined);
  const [mapZoom, setMapZoom] = useState(15);
  const [locationError, setLocationError] = useState('');

  // Handle hydration
  useEffect(() => {
    setMounted(true);
  }, []);

  // Get user location on mount
  useEffect(() => {
    if ('geolocation' in navigator) {
      // Watch position for continuous updates
      const id = navigator.geolocation.watchPosition(
        (position) => {
          setUserLocation({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
          });
          setLocationError('');
        },
        (error) => {
          setLocationError(`Location error: ${error.message}`);
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 0,
        }
      );

      return () => {
        navigator.geolocation.clearWatch(id);
      };
    } else {
      setLocationError('Geolocation not supported by your browser');
    }
  }, []);

  const centerOnUser = () => {
    if (userLocation) {
      setMapCenter([userLocation.latitude, userLocation.longitude]);
      setMapZoom(16);
    }
  };

  const centerOnCart = () => {
    if (cartLocation) {
      setMapCenter([cartLocation.latitude, cartLocation.longitude]);
      setMapZoom(16);
    }
  };

  const showBothLocations = () => {
    if (userLocation && cartLocation) {
      // Calculate center between user and cart
      const centerLat = (userLocation.latitude + cartLocation.latitude) / 2;
      const centerLng = (userLocation.longitude + cartLocation.longitude) / 2;
      setMapCenter([centerLat, centerLng]);
      setMapZoom(14);
    } else if (userLocation) {
      centerOnUser();
    } else if (cartLocation) {
      centerOnCart();
    }
  };

  const getCandyStatusMessage = () => {
    if (candyStatus === 'good') {
      return { text: 'Plenty of candy available!', color: 'text-green-400', emoji: '✓' };
    } else if (candyStatus === 'low') {
      return { text: 'Hurry, running low on candy!', color: 'text-yellow-400', emoji: '⚠️' };
    } else {
      return { text: 'All out - maybe next time!', color: 'text-red-400', emoji: '✗' };
    }
  };

  const statusInfo = getCandyStatusMessage();

  // Show loading state during hydration
  if (!mounted) {
    return (
      <div className="h-screen w-screen flex items-center justify-center bg-gradient-to-br from-orange-900 via-purple-900 to-black">
        <div className="text-white text-2xl">Loading... 🎃</div>
      </div>
    );
  }

  return (
    <div className="h-screen w-screen flex flex-col bg-black">
      {/* Header Banner */}
      <div className="bg-gradient-to-r from-orange-600 via-purple-600 to-orange-600 p-4 shadow-lg z-10">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-2xl md:text-3xl font-bold text-white text-center animate-pulse">
            {festiveMessage}
          </h1>
          <div className={`text-center mt-2 font-semibold ${statusInfo.color} flex items-center justify-center gap-2`}>
            <span className="text-2xl">{statusInfo.emoji}</span>
            <span className="text-lg">{statusInfo.text}</span>
          </div>
          {isAdminLoggedIn && autoRefreshEnabled && (
            <div className="text-center mt-2">
              <span className="text-sm bg-green-500 text-white px-3 py-1 rounded-full">
                🔄 Auto-updating every {refreshInterval}s
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Map Container */}
      <div className="flex-1 relative">
        <CandyMap
          cartLocation={cartLocation}
          userLocation={userLocation}
          center={mapCenter}
          zoom={mapZoom}
        />

        {/* Navigation Controls */}
        <div className="absolute top-4 right-4 z-[1000] space-y-2">
          <button
            onClick={centerOnUser}
            disabled={!userLocation}
            className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-lg transition-all transform hover:scale-105"
          >
            📍 My Location
          </button>
          <button
            onClick={centerOnCart}
            disabled={!cartLocation}
            className="bg-orange-600 hover:bg-orange-700 disabled:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-lg transition-all transform hover:scale-105"
          >
            🍬 Find Cart
          </button>
          <button
            onClick={showBothLocations}
            disabled={!userLocation && !cartLocation}
            className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-lg transition-all transform hover:scale-105"
          >
            🗺️ View All
          </button>
        </div>

        {/* Location Error */}
        {locationError && (
          <div className="absolute top-4 left-4 z-[1000] bg-red-900/90 border-2 border-red-500 rounded-lg p-3 max-w-xs">
            <div className="text-red-200 text-sm">{locationError}</div>
          </div>
        )}
      </div>

      {/* Bottom Info Panel */}
      <div className="bg-gradient-to-r from-purple-900 via-black to-purple-900 p-4 border-t-4 border-orange-500">
        <div className="max-w-7xl mx-auto">
          {/* Candy Status Card */}
          <div className="bg-black/50 backdrop-blur-lg border-2 border-purple-500 rounded-xl p-4 mb-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="text-5xl">{statusInfo.emoji}</div>
                <div>
                  <div className="text-white font-bold text-lg">Candy Status</div>
                  <div className={`${statusInfo.color} font-semibold`}>
                    {candyStatus === 'good' ? 'Plenty Available' :
                     candyStatus === 'low' ? 'Running Low' : 'Out of Stock'}
                  </div>
                </div>
              </div>
              {cartLocation && (
                <div className="text-right">
                  <div className="text-purple-300 text-sm">Cart Location</div>
                  <div className="text-green-400 font-semibold">📍 Active</div>
                </div>
              )}
            </div>
          </div>

          {/* User Location Status */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <span className="text-2xl">👻</span>
              <span className="text-purple-300 text-sm">
                {userLocation ? 'Your location tracked' : 'Enable location for navigation'}
              </span>
            </div>

            {!isAdminLoggedIn && (
              <button
                onClick={() => router.push('/admin/login')}
                className="bg-orange-600 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded-lg transition-colors text-sm"
              >
                Admin Login
              </button>
            )}

            {isAdminLoggedIn && (
              <button
                onClick={() => router.push('/admin/dashboard')}
                className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg transition-colors text-sm"
              >
                Dashboard
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Floating Halloween Decorations */}
      <div className="fixed top-20 left-4 text-3xl animate-bounce pointer-events-none z-[500]">
        🦇
      </div>
      <div className="fixed top-32 right-24 text-3xl animate-bounce delay-100 pointer-events-none z-[500]">
        👻
      </div>
      <div className="fixed bottom-32 left-12 text-3xl animate-bounce delay-200 pointer-events-none z-[500]">
        🎃
      </div>
    </div>
  );
}
